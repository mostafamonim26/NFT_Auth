@page "/"
@rendermode InteractiveServer
@using System.Net.Http
@inject HttpClient _http
@using C1.Blazor.Input
@using C1.Blazor.Core
@using C1.Blazor.Calendar
@using C1.Blazor.DateTimeEditors
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation


<h3>Account</h3>
<EditForm Model="@account">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="BranchId">Branch ID:
                    <small class="form-text text-muted">4 digit only</small>
                </label>
                
                <InputNumber id="BranchId" @bind-Value="account.BranchId" class="form-control" />
            </div>

            <div class="form-group">
                <label for="ProductId">Product ID:
                    <small class="form-text text-muted">3 digit only</small>
                </label>
                <InputNumber id="ProductId" @bind-Value="account.ProductId" class="form-control" />
                <ValidationMessage For="@(() => account.ProductId)" />
            </div>

            <div class="form-group">
                <label for="GroupId">Group ID:</label>
                <InputNumber id="GroupId" @bind-Value="account.GroupId" class="form-control" />
            </div>

            <div class="form-group">
                <label for="BalanceLcy">Balance (LCY):</label>
                <InputNumber id="BalanceLcy" @bind-Value="account.BalanceLcy" class="form-control" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label for="AccountNumber">Account Number:
                    <small class="form-text text-muted">11 digit only</small>
                </label>
                <InputNumber id="AccountNumber" @bind-Value="account.AccountNumber" class="form-control" />
                <ValidationMessage For="@(() => account.AccountNumber)" />
            </div>

            <div class="form-group">
                <label for="CurrId">Currency ID:
                    <small class="form-text text-muted">3 digit only</small>
                </label>
                <InputText id="CurrId" @bind-Value="account.CurrId" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerId">Customer ID:
                    <small class="form-text text-muted">10 digit only</small>
                </label>
                <InputNumber id="CustomerId" @bind-Value="account.CustomerId" class="form-control" />
                <ValidationMessage For="@(() => account.CustomerId)" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="MakeBy">Make BY:
            <small class="form-text text-muted">User Name</small>
        </label>
        <InputText id="MakeBy" @bind-Value="account.MakeBy" class="form-control" style="width: 150px;" />
        <ValidationMessage For="@(() => account.MakeBy)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <button type="refresh" class="btn btn-primary">Refresh</button>
</EditForm>


@code {
    private Accounts account = new Accounts();


    public class Accounts
    {
        public int BranchId { get; set; }

        [Required(ErrorMessage = "Account Number is required")]
        [Range(10000000000, 99999999999, ErrorMessage = "Account Number must be exactly 11 digits")]
        public int AccountNumber { get; set; }

        [Required(ErrorMessage = "Product ID is required")]
        [RegularExpression(@"^\d{3}$", ErrorMessage = "Product ID must be a 3-digit number")]
        public int ProductId { get; set; }

        public string CurrId { get; set; }
        public string AccType { get; set; }

        [Required(ErrorMessage = "Customer ID is required")]
        [Range(1000000000, 9999999999, ErrorMessage = "Customer ID must be exactly 10 digits")]
        public long? CustomerId { get; set; }

        public int GroupId { get; set; }
        public string AccStatus { get; set; }
        public decimal BalanceLcy { get; set; }

        public DateTime MakeDt { get; set; } = DateTime.Now;
        public string Auth1stBy { get; set; }
        public DateTime? Auth1stDt { get; set; }
        public string Auth2ndBy { get; set; }
        public DateTime? Auth2ndDt { get; set; }
        public string LastAction { get; set; }
        public string AuthStatusId { get; set; }

        [Required(ErrorMessage = "Make BY is required.")]
        public string MakeBy { get; set; }

    }
    private void LimitToTenDigits(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(inputValue) && inputValue.Length > 10)
        {
            account.CustomerId = long.Parse(inputValue.Substring(0, 10));
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine(account);

            // Post the signUpModel object to the API endpoint
            var response = await _http.PostAsJsonAsync("Dashboard/add_account", account);

            // Check if the response is successful
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<object>();
                Console.WriteLine(result);
            }
            else
            {
                Console.WriteLine($"Error: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

}

