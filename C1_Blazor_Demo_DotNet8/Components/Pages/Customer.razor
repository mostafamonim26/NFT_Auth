@page "/customer"
@rendermode InteractiveServer
@using System.Net.Http
@inject HttpClient _http
@using C1.Blazor.Input
@using C1.Blazor.Core
@using C1.Blazor.Calendar
@using C1.Blazor.DateTimeEditors
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web 
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<h3>Customer Form</h3>

<EditForm Model="@customer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="CustomerId">Customer ID:
                    <small class="form-text text-muted">10 digit only</small>
                </label>
                <InputNumber id="CustomerId" @bind-Value="customer.CustomerId" class="form-control" disabled />
            </div>
            <div class="form-group">
                <label for="CustomerSalutation">Customer Salutation:
                    <small class="form-text text-muted">Mr/Mrs/Dr/Eng</small>
                </label>
                <InputText id="CustomerSalutation" @bind-Value="customer.CustomerSalutation" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerMiddleName">Customer Middle Name:</label>
                <InputText id="CustomerMiddleName" @bind-Value="customer.CustomerMiddleName" class="form-control" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label for="CustomerShortName">Customer Short Name:</label>
                <InputText id="CustomerShortName" @bind-Value="customer.CustomerShortName" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerFirstName">Customer First Name:</label>
                <InputText id="CustomerFirstName" @bind-Value="customer.CustomerFirstName" class="form-control" />
            </div>

            <div class="form-group">
                <label for="CustomerLastName">Customer Last Name:</label>
                <InputText id="CustomerLastName" @bind-Value="customer.CustomerLastName" class="form-control" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="MakeBy">Make BY:
            <small class="form-text text-muted">User Name</small>
        </label>
        <InputText id="MakeBy" @bind-Value="customer.MakeBy" class="form-control" style="width: 150px;" />
        <ValidationMessage For="@(() => customer.MakeBy)" />
    </div>

    <button type="submit" class="btn btn-primary mt-3" >Submit</button>
    <button type="refresh" class="btn btn-primary mt-3">Refresh</button>

</EditForm>

@code {
    public class CustomerModel
    {
        public int CustomerId { get; set; }
        public string CustomerCategoryId { get; set; }
        public string CustomerFullName { get; set; }
        public string CustomerShortName { get; set; }
        public string CustomerSalutation { get; set; }
        public string CustomerFirstName { get; set; }
        public string CustomerMiddleName { get; set; }
        public string CustomerLastName { get; set; }

        public DateTime MakeDt { get; set; }
        public string Auth1stBy { get; set; }
        public DateTime? Auth1stDt { get; set; }
        public string Auth2ndBy { get; set; }
        public DateTime? Auth2ndDt { get; set; }
        public string AuthStatusId { get; set; }
        public string LastAction { get; set; }

        [Required(ErrorMessage = "Make BY is required.")]
        public string MakeBy { get; set; }
    }
    private CustomerModel customer = new CustomerModel();

    private async Task HandleValidSubmit()
    {
        // Handle form submission logic
        //Console.WriteLine("Sign Up button clicked!");
        // var data = await _http.PostAsJsonAsync<object>("Home/add_user");

        // Console.WriteLine(data);
        try
        {
            Console.WriteLine(customer);

            // Post the signUpModel object to the API endpoint
            var response = await _http.PostAsJsonAsync("Dashboard/add_customer", customer);
            Console.WriteLine($"Status Code: {response.StatusCode}");

            // Check if the response is successful
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<object>();
                Console.WriteLine(result);
            }
            else
            {
                Console.WriteLine($"Error: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
   
    
}

